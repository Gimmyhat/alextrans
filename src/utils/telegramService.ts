// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è Telegram API
const TELEGRAM_BOT_TOKEN = import.meta.env.VITE_TELEGRAM_BOT_TOKEN || '';
const TELEGRAM_CHAT_ID = import.meta.env.VITE_TELEGRAM_CHAT_ID || '';

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
if (!TELEGRAM_BOT_TOKEN || !TELEGRAM_CHAT_ID) {
  console.error('–û—à–∏–±–∫–∞: –ù–µ —É–∫–∞–∑–∞–Ω—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è Telegram API');
}

// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è (–±–µ–∑ –ø–æ–ª–Ω–æ–≥–æ —Ç–æ–∫–µ–Ω–∞ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏)
console.log('Telegram API –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:');
console.log('BOT_TOKEN: ' + (TELEGRAM_BOT_TOKEN ? TELEGRAM_BOT_TOKEN.substring(0, 10) + '...' : '–Ω–µ –∑–∞–¥–∞–Ω'));
console.log('CHAT_ID: ' + TELEGRAM_CHAT_ID);

// –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ã –¥–ª—è —Ç–∏–ø–æ–≤ –¥–∞–Ω–Ω—ã—Ö —Ñ–æ—Ä–º
export interface ICallbackFormData {
  phone: string;
}

export interface ICalculatorFormData {
  from: string;
  to: string;
  company: string;
  name: string;
  phone: string;
  email: string;
  service: string;
}

export interface IContactFormData {
  name: string;
  phone: string;
  email: string;
  message: string;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —Ñ–æ—Ä–º—ã –æ–±—Ä–∞—Ç–Ω–æ–≥–æ –∑–≤–æ–Ω–∫–∞
const formatCallbackMessage = (data: ICallbackFormData): string => {
  return `üîî *–ó–ê–ü–†–û–° –ù–ê –û–ë–†–ê–¢–ù–´–ô –ó–í–û–ù–û–ö*\n\nüì± –¢–µ–ª–µ—Ñ–æ–Ω: ${data.phone}\n‚è± –í—Ä–µ–º—è –∑–∞–ø—Ä–æ—Å–∞: ${new Date().toLocaleString('ru-RU')}`;
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ —Ñ–æ—Ä–º—ã –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞
const formatCalculatorMessage = (data: ICalculatorFormData): string => {
  return `üìä *–ó–ê–Ø–í–ö–ê –ù–ê –†–ê–°–ß–ï–¢ –°–¢–û–ò–ú–û–°–¢–ò*\n\nüè¢ –ö–æ–º–ø–∞–Ω–∏—è: ${data.company}\nüë§ –ò–º—è: ${data.name}\nüì± –¢–µ–ª–µ—Ñ–æ–Ω: ${data.phone}\nüìß Email: ${data.email}\n\nüöö –£—Å–ª—É–≥–∞: ${data.service}\nüîÑ –ú–∞—Ä—à—Ä—É—Ç: ${data.from} ‚Üí ${data.to}\n\n‚è± –í—Ä–µ–º—è –∑–∞–ø—Ä–æ—Å–∞: ${new Date().toLocaleString('ru-RU')}`;
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–π —Ñ–æ—Ä–º—ã
const formatContactMessage = (data: IContactFormData): string => {
  return `‚úâÔ∏è *–°–û–û–ë–©–ï–ù–ò–ï –° –°–ê–ô–¢–ê*\n\nüë§ –ò–º—è: ${data.name}\nüì± –¢–µ–ª–µ—Ñ–æ–Ω: ${data.phone}\nüìß Email: ${data.email}\n\nüí¨ –°–æ–æ–±—â–µ–Ω–∏–µ:\n${data.message}\n\n‚è± –í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏: ${new Date().toLocaleString('ru-RU')}`;
};

// –ë–∞–∑–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è —á–µ—Ä–µ–∑ Telegram API
const sendTelegramMessage = async (text: string): Promise<boolean> => {
  try {
    console.log('–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram...');
    
    // –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è API –∑–∞–ø—Ä–æ—Å–∞
    const params = {
      chat_id: TELEGRAM_CHAT_ID,
      text: text,
      parse_mode: 'Markdown'
    };
    
    console.log('–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞:', JSON.stringify({
      chat_id: params.chat_id,
      parse_mode: params.parse_mode,
      text_length: params.text.length
    }));
    
    // –í–º–µ—Å—Ç–æ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è URL —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏ –∏—Å–ø–æ–ª—å–∑—É–µ–º fetch —Å JSON
    const url = `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`;
    console.log('URL –∑–∞–ø—Ä–æ—Å–∞:', url.replace(TELEGRAM_BOT_TOKEN, '[–°–ö–†–´–¢–û]'));
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
    console.log('–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞...');
    const response = await fetch(url, {
      method: 'POST',
      mode: 'cors', // –ø—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ —Ä–µ–∂–∏–º—ã, –µ—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –ø—Ä–æ–±–ª–µ–º—ã —Å CORS
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify(params)
    });
    
    console.log('–ü–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç. –°—Ç–∞—Ç—É—Å:', response.status);
    
    if (!response.ok) {
      console.error('HTTP Error:', response.status, response.statusText);
      return false;
    }
    
    const data = await response.json();
    console.log('–û—Ç–≤–µ—Ç –æ—Ç API Telegram:', JSON.stringify(data));
    
    if (!data.ok) {
      console.error('Telegram API Error:', data.description);
      return false;
    }
    
    console.log('–°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!');
    return true;
  } catch (error) {
    console.error('Error sending Telegram message:', error);
    return false;
  }
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–∫–∏ –Ω–∞ –æ–±—Ä–∞—Ç–Ω—ã–π –∑–≤–æ–Ω–æ–∫
export const sendCallbackRequest = async (data: ICallbackFormData): Promise<boolean> => {
  const messageText = formatCallbackMessage(data);
  return await sendTelegramMessage(messageText);
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞—è–≤–∫–∏ –∏–∑ –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä–∞
export const sendCalculatorRequest = async (data: ICalculatorFormData): Promise<boolean> => {
  const messageText = formatCalculatorMessage(data);
  return await sendTelegramMessage(messageText);
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –∫–æ–Ω—Ç–∞–∫—Ç–Ω–æ–π —Ñ–æ—Ä–º—ã
export const sendContactMessage = async (data: IContactFormData): Promise<boolean> => {
  const messageText = formatContactMessage(data);
  return await sendTelegramMessage(messageText);
}; 